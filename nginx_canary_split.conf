# NGINX Canary Deployment Example
# Author: [Your Name]
# Description: Route 10% of traffic to a new version (Canary) while keeping sessions sticky and isolated.

# ===============================================
# File: /etc/nginx/nginx.conf
# ===============================================
http {
    # Split traffic by client IP (sticky)
    split_clients "${remote_addr}A" $target_upstream {
        10%  "app_canary";   # 10% of traffic -> canary
        *    "app_stable";   # remaining 90% -> stable
    }

    include /etc/nginx/conf.d/*.conf;
}

# ===============================================
# File: /etc/nginx/conf.d/upstream.conf
# ===============================================
upstream app_stable {
    server stable1:8080;
    keepalive 100;
}

upstream app_canary {
    server canary1:8080;
    keepalive 50;
}

# ===============================================
# File: /etc/nginx/conf.d/default.conf
# ===============================================
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/ssl/certs/server.crt;
    ssl_certificate_key /etc/nginx/ssl/private/server.key;

    location /api/ {
        proxy_pass http://$target_upstream;
        proxy_next_upstream off;  # disable forwarding to other servers
        proxy_next_upstream_tries 1;

        # pass real client info
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # disable caching for test accuracy
        proxy_hide_header Cache-Control;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }
}

# ===============================================
# Verification
# ===============================================
# Test and reload configuration
#   nginx -t && systemctl reload nginx

# Check Canary traffic isolation
#   grep canary /var/log/nginx/access.log | wc -l
